// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBucketObjectVersionsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub content_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub is_truncated: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub key_marker: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_keys: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub prefix: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub version: ::std::option::Option<::std::vec::Vec::<crate::types::Version>>,
    #[allow(missing_docs)] // documentation missing in model
    pub version_id_marker: ::std::option::Option<::std::string::String>,
}
impl  GetBucketObjectVersionsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(&self) -> ::std::option::Option<& str> {
        self.content_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(&self) -> ::std::option::Option<bool> {
        self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_marker(&self) -> ::std::option::Option<& str> {
        self.key_marker.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(&self) -> ::std::option::Option<& str> {
        self.max_keys.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(&self) -> ::std::option::Option<& str> {
        self.prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.version.is_none()`.
    pub fn version(&self) -> & [crate::types::Version] {
        self.version.as_deref()
        .unwrap_or_default()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn version_id_marker(&self) -> ::std::option::Option<& str> {
        self.version_id_marker.as_deref()
    }
}
impl GetBucketObjectVersionsOutput {
    /// Creates a new builder-style object to manufacture [`GetBucketObjectVersionsOutput`](crate::operation::get_bucket_object_versions::GetBucketObjectVersionsOutput).
    pub fn builder() -> crate::operation::get_bucket_object_versions::builders::GetBucketObjectVersionsOutputBuilder {
        crate::operation::get_bucket_object_versions::builders::GetBucketObjectVersionsOutputBuilder::default()
    }
}

/// A builder for [`GetBucketObjectVersionsOutput`](crate::operation::get_bucket_object_versions::GetBucketObjectVersionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetBucketObjectVersionsOutputBuilder {
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) is_truncated: ::std::option::Option<bool>,
    pub(crate) key_marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_keys: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::vec::Vec::<crate::types::Version>>,
    pub(crate) version_id_marker: ::std::option::Option<::std::string::String>,
}
impl GetBucketObjectVersionsOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_is_truncated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_truncated = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_is_truncated(&self) -> &::std::option::Option<bool> {
        &self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_key_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_key_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_marker
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_keys = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_keys(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_keys = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_keys(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_keys
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// Appends an item to `version`.
    ///
    /// To override the contents of this collection use [`set_version`](Self::set_version).
    ///
    pub fn version(mut self, input: crate::types::Version) -> Self {
        let mut v = self.version.unwrap_or_default();
                        v.push(input);
                        self.version = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_version(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Version>>) -> Self {
        self.version = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_version(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Version>> {
        &self.version
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn version_id_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_version_id_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_version_id_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id_marker
    }
    /// Consumes the builder and constructs a [`GetBucketObjectVersionsOutput`](crate::operation::get_bucket_object_versions::GetBucketObjectVersionsOutput).
    pub fn build(self) -> crate::operation::get_bucket_object_versions::GetBucketObjectVersionsOutput {
        crate::operation::get_bucket_object_versions::GetBucketObjectVersionsOutput {
            content_type: self.content_type
            ,
            is_truncated: self.is_truncated
            ,
            key_marker: self.key_marker
            ,
            max_keys: self.max_keys
            ,
            name: self.name
            ,
            prefix: self.prefix
            ,
            version: self.version
            ,
            version_id_marker: self.version_id_marker
            ,
        }
    }
}

