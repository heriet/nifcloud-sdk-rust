// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompleteMultipartUploadInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub bucket: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub complete_multipart_upload: ::std::option::Option<crate::types::RequestCompleteMultipartUpload>,
    #[allow(missing_docs)] // documentation missing in model
    pub object: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub upload_id: ::std::option::Option<::std::string::String>,
}
impl  CompleteMultipartUploadInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn bucket(&self) -> ::std::option::Option<& str> {
        self.bucket.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn complete_multipart_upload(&self) -> ::std::option::Option<& crate::types::RequestCompleteMultipartUpload> {
        self.complete_multipart_upload.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn object(&self) -> ::std::option::Option<& str> {
        self.object.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn upload_id(&self) -> ::std::option::Option<& str> {
        self.upload_id.as_deref()
    }
}
impl CompleteMultipartUploadInput {
    /// Creates a new builder-style object to manufacture [`CompleteMultipartUploadInput`](crate::operation::complete_multipart_upload::CompleteMultipartUploadInput).
    pub fn builder() -> crate::operation::complete_multipart_upload::builders::CompleteMultipartUploadInputBuilder {
        crate::operation::complete_multipart_upload::builders::CompleteMultipartUploadInputBuilder::default()
    }
}

/// A builder for [`CompleteMultipartUploadInput`](crate::operation::complete_multipart_upload::CompleteMultipartUploadInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompleteMultipartUploadInputBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) complete_multipart_upload: ::std::option::Option<crate::types::RequestCompleteMultipartUpload>,
    pub(crate) object: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
}
impl CompleteMultipartUploadInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn complete_multipart_upload(mut self, input: crate::types::RequestCompleteMultipartUpload) -> Self {
        self.complete_multipart_upload = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_complete_multipart_upload(mut self, input: ::std::option::Option<crate::types::RequestCompleteMultipartUpload>) -> Self {
        self.complete_multipart_upload = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_complete_multipart_upload(&self) -> &::std::option::Option<crate::types::RequestCompleteMultipartUpload> {
        &self.complete_multipart_upload
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn object(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_object(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_object(&self) -> &::std::option::Option<::std::string::String> {
        &self.object
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// Consumes the builder and constructs a [`CompleteMultipartUploadInput`](crate::operation::complete_multipart_upload::CompleteMultipartUploadInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::complete_multipart_upload::CompleteMultipartUploadInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::complete_multipart_upload::CompleteMultipartUploadInput {
                bucket: self.bucket
                ,
                complete_multipart_upload: self.complete_multipart_upload
                ,
                object: self.object
                ,
                upload_id: self.upload_id
                ,
            }
        )
    }
}

