// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteObjectOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub x_amz_version_id: ::std::option::Option<::std::string::String>,
}
impl  DeleteObjectOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_version_id(&self) -> ::std::option::Option<& str> {
        self.x_amz_version_id.as_deref()
    }
}
impl DeleteObjectOutput {
    /// Creates a new builder-style object to manufacture [`DeleteObjectOutput`](crate::operation::delete_object::DeleteObjectOutput).
    pub fn builder() -> crate::operation::delete_object::builders::DeleteObjectOutputBuilder {
        crate::operation::delete_object::builders::DeleteObjectOutputBuilder::default()
    }
}

/// A builder for [`DeleteObjectOutput`](crate::operation::delete_object::DeleteObjectOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteObjectOutputBuilder {
    pub(crate) x_amz_version_id: ::std::option::Option<::std::string::String>,
}
impl DeleteObjectOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.x_amz_version_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.x_amz_version_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.x_amz_version_id
    }
    /// Consumes the builder and constructs a [`DeleteObjectOutput`](crate::operation::delete_object::DeleteObjectOutput).
    pub fn build(self) -> crate::operation::delete_object::DeleteObjectOutput {
        crate::operation::delete_object::DeleteObjectOutput {
            x_amz_version_id: self.x_amz_version_id
            ,
        }
    }
}

