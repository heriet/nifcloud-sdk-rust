// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_object::_put_object_output::PutObjectOutputBuilder;

pub use crate::operation::put_object::_put_object_input::PutObjectInputBuilder;

impl PutObjectInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(self, client: &crate::Client) -> ::std::result::Result<
                        crate::operation::put_object::PutObjectOutput,
                        ::aws_smithy_runtime_api::client::result::SdkError<
                            crate::operation::put_object::PutObjectError,
                            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse
                        >
                    > {
                        let mut fluent_builder = client.put_object();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `PutObject`.
/// 
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutObjectFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::put_object::builders::PutObjectInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
                crate::client::customize::internal::CustomizableSend<
                    crate::operation::put_object::PutObjectOutput,
                    crate::operation::put_object::PutObjectError,
                > for PutObjectFluentBuilder
            {
                fn send(
                    self,
                    config_override: crate::config::Builder,
                ) -> crate::client::customize::internal::BoxFuture<
                    crate::client::customize::internal::SendResult<
                        crate::operation::put_object::PutObjectOutput,
                        crate::operation::put_object::PutObjectError,
                    >,
                > {
                    ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
                }
            }
impl PutObjectFluentBuilder {
    /// Creates a new `PutObject`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutObject as a reference.
    pub fn as_input(&self) -> &crate::operation::put_object::builders::PutObjectInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> ::std::result::Result<crate::operation::put_object::PutObjectOutput, ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_object::PutObjectError, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>> {
                        let input = self.inner.build().map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
                        let runtime_plugins = crate::operation::put_object::PutObject::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
                        crate::operation::put_object::PutObject::orchestrate(&runtime_plugins, input).await
                    }
    
                    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
                    pub fn customize(
                        self,
                    ) -> crate::client::customize::CustomizableOperation<crate::operation::put_object::PutObjectOutput, crate::operation::put_object::PutObjectError, Self> {
                        crate::client::customize::CustomizableOperation::new(self)
                    }
    pub(crate) fn config_override(
                        mut self,
                        config_override: impl Into<crate::config::Builder>,
                    ) -> Self {
                        self.set_config_override(Some(config_override.into()));
                        self
                    }
    
                    pub(crate) fn set_config_override(
                        &mut self,
                        config_override: Option<crate::config::Builder>,
                    ) -> &mut Self {
                        self.config_override = config_override;
                        self
                    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn body(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.body(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_body(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_body(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_body(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        self.inner.get_body()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.bucket(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_bucket(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_bucket()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_disposition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.content_disposition(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_disposition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_content_disposition(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_disposition(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_content_disposition()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_encoding(mut self, input: crate::types::ContentEncodingOfPutObjectRequest) -> Self {
        self.inner = self.inner.content_encoding(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_encoding(mut self, input: ::std::option::Option<crate::types::ContentEncodingOfPutObjectRequest>) -> Self {
        self.inner = self.inner.set_content_encoding(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_encoding(&self) -> &::std::option::Option<crate::types::ContentEncodingOfPutObjectRequest> {
        self.inner.get_content_encoding()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_md5(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.content_md5(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_md5(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_content_md5(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_md5(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_content_md5()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.content_type(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_content_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_content_type()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn object(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.object(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_object(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_object(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_object(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_object()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_meta(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x_amz_meta(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_meta(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x_amz_meta(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_meta(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x_amz_meta()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_server_side_encryption(mut self, input: crate::types::XAmzServerSideEncryptionOfPutObjectRequest) -> Self {
        self.inner = self.inner.x_amz_server_side_encryption(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_server_side_encryption(mut self, input: ::std::option::Option<crate::types::XAmzServerSideEncryptionOfPutObjectRequest>) -> Self {
        self.inner = self.inner.set_x_amz_server_side_encryption(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_server_side_encryption(&self) -> &::std::option::Option<crate::types::XAmzServerSideEncryptionOfPutObjectRequest> {
        self.inner.get_x_amz_server_side_encryption()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_server_side_encryption_customer_algorithm(mut self, input: crate::types::XAmzServerSideEncryptionCustomerAlgorithmOfPutObjectRequest) -> Self {
        self.inner = self.inner.x_amz_server_side_encryption_customer_algorithm(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_server_side_encryption_customer_algorithm(mut self, input: ::std::option::Option<crate::types::XAmzServerSideEncryptionCustomerAlgorithmOfPutObjectRequest>) -> Self {
        self.inner = self.inner.set_x_amz_server_side_encryption_customer_algorithm(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_server_side_encryption_customer_algorithm(&self) -> &::std::option::Option<crate::types::XAmzServerSideEncryptionCustomerAlgorithmOfPutObjectRequest> {
        self.inner.get_x_amz_server_side_encryption_customer_algorithm()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_server_side_encryption_customer_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x_amz_server_side_encryption_customer_key(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_server_side_encryption_customer_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x_amz_server_side_encryption_customer_key(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_server_side_encryption_customer_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x_amz_server_side_encryption_customer_key()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_server_side_encryption_customer_key_md5(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x_amz_server_side_encryption_customer_key_md5(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_server_side_encryption_customer_key_md5(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x_amz_server_side_encryption_customer_key_md5(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_server_side_encryption_customer_key_md5(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x_amz_server_side_encryption_customer_key_md5()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_storage_class(mut self, input: crate::types::XAmzStorageClassOfPutObjectRequest) -> Self {
        self.inner = self.inner.x_amz_storage_class(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_storage_class(mut self, input: ::std::option::Option<crate::types::XAmzStorageClassOfPutObjectRequest>) -> Self {
        self.inner = self.inner.set_x_amz_storage_class(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_storage_class(&self) -> &::std::option::Option<crate::types::XAmzStorageClassOfPutObjectRequest> {
        self.inner.get_x_amz_storage_class()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn x_amz_tagging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x_amz_tagging(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_x_amz_tagging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x_amz_tagging(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_x_amz_tagging(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x_amz_tagging()
    }
}

