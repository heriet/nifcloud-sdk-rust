// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMultipartUploadsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub bucket: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub content_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub is_truncated: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub key_marker: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_uploads: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_key_marker: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_upload_id_marker: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub upload: ::std::option::Option<::std::vec::Vec::<crate::types::Upload>>,
    #[allow(missing_docs)] // documentation missing in model
    pub upload_id_marker: ::std::option::Option<::std::string::String>,
}
impl  ListMultipartUploadsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn bucket(&self) -> ::std::option::Option<& str> {
        self.bucket.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(&self) -> ::std::option::Option<& str> {
        self.content_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(&self) -> ::std::option::Option<bool> {
        self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_marker(&self) -> ::std::option::Option<& str> {
        self.key_marker.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_uploads(&self) -> ::std::option::Option<i32> {
        self.max_uploads
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_key_marker(&self) -> ::std::option::Option<& str> {
        self.next_key_marker.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_upload_id_marker(&self) -> ::std::option::Option<& str> {
        self.next_upload_id_marker.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.upload.is_none()`.
    pub fn upload(&self) -> & [crate::types::Upload] {
        self.upload.as_deref()
        .unwrap_or_default()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn upload_id_marker(&self) -> ::std::option::Option<& str> {
        self.upload_id_marker.as_deref()
    }
}
impl ListMultipartUploadsOutput {
    /// Creates a new builder-style object to manufacture [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
    pub fn builder() -> crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder {
        crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder::default()
    }
}

/// A builder for [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListMultipartUploadsOutputBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) is_truncated: ::std::option::Option<bool>,
    pub(crate) key_marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_uploads: ::std::option::Option<i32>,
    pub(crate) next_key_marker: ::std::option::Option<::std::string::String>,
    pub(crate) next_upload_id_marker: ::std::option::Option<::std::string::String>,
    pub(crate) upload: ::std::option::Option<::std::vec::Vec::<crate::types::Upload>>,
    pub(crate) upload_id_marker: ::std::option::Option<::std::string::String>,
}
impl ListMultipartUploadsOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_is_truncated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_truncated = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_is_truncated(&self) -> &::std::option::Option<bool> {
        &self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_key_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_key_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_marker
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_uploads(mut self, input: i32) -> Self {
        self.max_uploads = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_uploads(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_uploads = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_uploads(&self) -> &::std::option::Option<i32> {
        &self.max_uploads
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_key_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_key_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_key_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_key_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_key_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_key_marker
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_upload_id_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_upload_id_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_upload_id_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_upload_id_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_upload_id_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_upload_id_marker
    }
    /// Appends an item to `upload`.
    ///
    /// To override the contents of this collection use [`set_upload`](Self::set_upload).
    ///
    pub fn upload(mut self, input: crate::types::Upload) -> Self {
        let mut v = self.upload.unwrap_or_default();
                        v.push(input);
                        self.upload = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_upload(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Upload>>) -> Self {
        self.upload = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_upload(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Upload>> {
        &self.upload
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn upload_id_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id_marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_upload_id_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id_marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_upload_id_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id_marker
    }
    /// Consumes the builder and constructs a [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
    pub fn build(self) -> crate::operation::list_multipart_uploads::ListMultipartUploadsOutput {
        crate::operation::list_multipart_uploads::ListMultipartUploadsOutput {
            bucket: self.bucket
            ,
            content_type: self.content_type
            ,
            is_truncated: self.is_truncated
            ,
            key_marker: self.key_marker
            ,
            max_uploads: self.max_uploads
            ,
            next_key_marker: self.next_key_marker
            ,
            next_upload_id_marker: self.next_upload_id_marker
            ,
            upload: self.upload
            ,
            upload_id_marker: self.upload_id_marker
            ,
        }
    }
}

