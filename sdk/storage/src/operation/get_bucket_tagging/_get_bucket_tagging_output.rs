// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBucketTaggingOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub content_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub tag_set: ::std::option::Option<::std::vec::Vec::<crate::types::TagSetOfGetBucketTagging>>,
}
impl  GetBucketTaggingOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(&self) -> ::std::option::Option<& str> {
        self.content_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_set.is_none()`.
    pub fn tag_set(&self) -> & [crate::types::TagSetOfGetBucketTagging] {
        self.tag_set.as_deref()
        .unwrap_or_default()
    }
}
impl GetBucketTaggingOutput {
    /// Creates a new builder-style object to manufacture [`GetBucketTaggingOutput`](crate::operation::get_bucket_tagging::GetBucketTaggingOutput).
    pub fn builder() -> crate::operation::get_bucket_tagging::builders::GetBucketTaggingOutputBuilder {
        crate::operation::get_bucket_tagging::builders::GetBucketTaggingOutputBuilder::default()
    }
}

/// A builder for [`GetBucketTaggingOutput`](crate::operation::get_bucket_tagging::GetBucketTaggingOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetBucketTaggingOutputBuilder {
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) tag_set: ::std::option::Option<::std::vec::Vec::<crate::types::TagSetOfGetBucketTagging>>,
}
impl GetBucketTaggingOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// Appends an item to `tag_set`.
    ///
    /// To override the contents of this collection use [`set_tag_set`](Self::set_tag_set).
    ///
    pub fn tag_set(mut self, input: crate::types::TagSetOfGetBucketTagging) -> Self {
        let mut v = self.tag_set.unwrap_or_default();
                        v.push(input);
                        self.tag_set = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tag_set(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::TagSetOfGetBucketTagging>>) -> Self {
        self.tag_set = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tag_set(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::TagSetOfGetBucketTagging>> {
        &self.tag_set
    }
    /// Consumes the builder and constructs a [`GetBucketTaggingOutput`](crate::operation::get_bucket_tagging::GetBucketTaggingOutput).
    pub fn build(self) -> crate::operation::get_bucket_tagging::GetBucketTaggingOutput {
        crate::operation::get_bucket_tagging::GetBucketTaggingOutput {
            content_type: self.content_type
            ,
            tag_set: self.tag_set
            ,
        }
    }
}

