// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Orchestration and serialization glue logic for `GetBucketVersion2`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetBucketVersion2;
impl GetBucketVersion2 {
    /// Creates a new `GetBucketVersion2`
    pub fn new() -> Self {
        Self
    }
    pub(crate) async fn orchestrate(
                        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
                        input: crate::operation::get_bucket_version2::GetBucketVersion2Input,
                    ) -> ::std::result::Result<crate::operation::get_bucket_version2::GetBucketVersion2Output, ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bucket_version2::GetBucketVersion2Error, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>> {
                        let map_err = |err: ::aws_smithy_runtime_api::client::result::SdkError<::aws_smithy_runtime_api::client::interceptors::context::Error, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>| {
                            err.map_service_error(|err| {
                                err.downcast::<crate::operation::get_bucket_version2::GetBucketVersion2Error>().expect("correct error type")
                            })
                        };
                        let context = Self::orchestrate_with_stop_point(runtime_plugins, input, ::aws_smithy_runtime::client::orchestrator::StopPoint::None)
                            .await
                            .map_err(map_err)?;
                        let output = context.finalize().map_err(map_err)?;
                        ::std::result::Result::Ok(output.downcast::<crate::operation::get_bucket_version2::GetBucketVersion2Output>().expect("correct output type"))
                    }
    
                    pub(crate) async fn orchestrate_with_stop_point(
                        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
                        input: crate::operation::get_bucket_version2::GetBucketVersion2Input,
                        stop_point: ::aws_smithy_runtime::client::orchestrator::StopPoint,
                    ) -> ::std::result::Result<::aws_smithy_runtime_api::client::interceptors::context::InterceptorContext, ::aws_smithy_runtime_api::client::result::SdkError<::aws_smithy_runtime_api::client::interceptors::context::Error, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>> {
                        let input = ::aws_smithy_runtime_api::client::interceptors::context::Input::erase(input);
                        ::aws_smithy_runtime::client::orchestrator::invoke_with_stop_point(
                            "storage",
                            "GetBucketVersion2",
                            input,
                            runtime_plugins,
                            stop_point
                        ).await
                    }
    
                    pub(crate) fn operation_runtime_plugins(
                        client_runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
                        client_config: &crate::config::Config,
                        config_override: ::std::option::Option<crate::config::Builder>,
                    ) -> ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins {
                        let mut runtime_plugins = client_runtime_plugins.with_operation_plugin(Self::new());
                        runtime_plugins = runtime_plugins
                                    .with_client_plugin(crate::auth_plugin::DefaultAuthOptionsPlugin::new(vec![::aws_smithy_runtime::client::auth::no_auth::NO_AUTH_SCHEME_ID]));
                        if let ::std::option::Option::Some(config_override) = config_override {
                            for plugin in config_override.runtime_plugins.iter().cloned() {
                                runtime_plugins = runtime_plugins.with_operation_plugin(plugin);
                            }
                            runtime_plugins = runtime_plugins.with_operation_plugin(
                                crate::config::ConfigOverrideRuntimePlugin::new(config_override, client_config.config.clone(), &client_config.runtime_components)
                            );
                        }
                        runtime_plugins
                    }
}
impl ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugin for GetBucketVersion2 {
                fn config(&self) -> ::std::option::Option<::aws_smithy_types::config_bag::FrozenLayer> {
                    let mut cfg = ::aws_smithy_types::config_bag::Layer::new("GetBucketVersion2");

                    cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedRequestSerializer::new(GetBucketVersion2RequestSerializer));
                    cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedResponseDeserializer::new(GetBucketVersion2ResponseDeserializer));

                    
                    cfg.store_put(::aws_smithy_runtime_api::client::auth::AuthSchemeOptionResolverParams::new(::aws_smithy_runtime_api::client::auth::static_resolver::StaticAuthSchemeOptionResolverParams::new()));

                    cfg.store_put(::aws_smithy_http::operation::Metadata::new(
                        "GetBucketVersion2",
                        "storage",
                    ));

                    ::std::option::Option::Some(cfg.freeze())
                }

                fn runtime_components(&self, _: &::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder) -> ::std::borrow::Cow<'_, ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder> {
                    #[allow(unused_mut)]
                    let mut rcb = ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder::new("GetBucketVersion2")
                            .with_interceptor(::aws_smithy_runtime::client::stalled_stream_protection::StalledStreamProtectionInterceptor::new(::aws_smithy_runtime::client::stalled_stream_protection::StalledStreamProtectionInterceptorKind::ResponseBody))
.with_interceptor(GetBucketVersion2EndpointParamsInterceptor)
                            .with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::TransientErrorClassifier::<crate::operation::get_bucket_version2::GetBucketVersion2Error>::new())
.with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::ModeledAsRetryableClassifier::<crate::operation::get_bucket_version2::GetBucketVersion2Error>::new());

                    ::std::borrow::Cow::Owned(rcb)
                }
            }

            
#[derive(Debug)]
            struct GetBucketVersion2ResponseDeserializer;
            impl ::aws_smithy_runtime_api::client::ser_de::DeserializeResponse for GetBucketVersion2ResponseDeserializer {
                

                fn deserialize_nonstreaming(&self, response: &::aws_smithy_runtime_api::client::orchestrator::HttpResponse) -> ::aws_smithy_runtime_api::client::interceptors::context::OutputOrError {
                    let (success, status) = (response.status().is_success(), response.status().as_u16());
            let headers = response.headers();
            let body = response.body().bytes().expect("body loaded");
            #[allow(unused_mut)]
            let mut force_error = false;
            
            let parse_result = if !success && status != 200 || force_error {
                crate::protocol_serde::shape_get_bucket_version2::de_get_bucket_version2_http_error(status, headers, body)
            } else {
                crate::protocol_serde::shape_get_bucket_version2::de_get_bucket_version2_http_response(status, headers, body)
            };
            crate::protocol_serde::type_erase_result(parse_result)
                }
            }
#[derive(Debug)]
            struct GetBucketVersion2RequestSerializer;
            impl ::aws_smithy_runtime_api::client::ser_de::SerializeRequest for GetBucketVersion2RequestSerializer {
                #[allow(unused_mut, clippy::let_and_return, clippy::needless_borrow, clippy::useless_conversion)]
                fn serialize_input(&self, input: ::aws_smithy_runtime_api::client::interceptors::context::Input, _cfg: &mut ::aws_smithy_types::config_bag::ConfigBag) -> ::std::result::Result<::aws_smithy_runtime_api::client::orchestrator::HttpRequest, ::aws_smithy_runtime_api::box_error::BoxError> {
                    let input = input.downcast::<crate::operation::get_bucket_version2::GetBucketVersion2Input>().expect("correct type");
                    let _header_serialization_settings = _cfg.load::<crate::serialization_settings::HeaderSerializationSettings>().cloned().unwrap_or_default();
                    let mut request_builder = {
                        fn uri_base(_input: &crate::operation::get_bucket_version2::GetBucketVersion2Input, output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::BuildError> {
    use ::std::fmt::Write as _;
    let input_1 = &_input.bucket;
    let input_1 = input_1.as_ref().ok_or_else(|| ::aws_smithy_types::error::operation::BuildError::missing_field("bucket", "cannot be empty or unset"))?;
    let bucket = ::aws_smithy_http::label::fmt_string(input_1, ::aws_smithy_http::label::EncodingStrategy::Default);
    if bucket.is_empty() {
                    return ::std::result::Result::Err(::aws_smithy_types::error::operation::BuildError::missing_field("bucket", "cannot be empty or unset"))
                }
    ::std::write!(output, "/{Bucket}", Bucket = bucket).expect("formatting should succeed");
    ::std::result::Result::Ok(())
}
fn uri_query(_input: &crate::operation::get_bucket_version2::GetBucketVersion2Input, mut output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::BuildError> {
    let mut query = ::aws_smithy_http::query::Writer::new(output);
    query.push_kv("x-id", "GetBucketVersion2");
    if let ::std::option::Option::Some(inner_2) = &_input.continuation_token {
         {
            query.push_kv("continuation-token", &::aws_smithy_http::query::fmt_string(&inner_2));
        }
    }
    if let ::std::option::Option::Some(inner_3) = &_input.delimiter {
         {
            query.push_kv("delimiter", &::aws_smithy_http::query::fmt_string(&inner_3));
        }
    }
    if let ::std::option::Option::Some(inner_4) = &_input.encoding_type {
         {
            query.push_kv("encoding-type", &::aws_smithy_http::query::fmt_string(&inner_4));
        }
    }
    if let ::std::option::Option::Some(inner_5) = &_input.fetch_owner {
         {
            query.push_kv("fetch-owner", &::aws_smithy_http::query::fmt_string(&inner_5));
        }
    }
    let inner_6 = &_input.list_type;
    let inner_6 = inner_6.as_ref().ok_or_else(|| ::aws_smithy_types::error::operation::BuildError::missing_field("list_type", "cannot be empty or unset"))?;
    if inner_6.is_empty() {
        return ::std::result::Result::Err(::aws_smithy_types::error::operation::BuildError::missing_field("list_type", "cannot be empty or unset"));
    }
    query.push_kv("list-type", &::aws_smithy_http::query::fmt_string(&inner_6));
    if let ::std::option::Option::Some(inner_7) = &_input.marker {
         {
            query.push_kv("marker", &::aws_smithy_http::query::fmt_string(&inner_7));
        }
    }
    if let ::std::option::Option::Some(inner_8) = &_input.max_keys {
         {
            query.push_kv("max-keys", &::aws_smithy_http::query::fmt_string(&inner_8));
        }
    }
    if let ::std::option::Option::Some(inner_9) = &_input.prefix {
         {
            query.push_kv("prefix", &::aws_smithy_http::query::fmt_string(&inner_9));
        }
    }
    if let ::std::option::Option::Some(inner_10) = &_input.start_after {
         {
            query.push_kv("start-after", &::aws_smithy_http::query::fmt_string(&inner_10));
        }
    }
    ::std::result::Result::Ok(())
}
#[allow(clippy::unnecessary_wraps)]
fn update_http_builder(
                input: &crate::operation::get_bucket_version2::GetBucketVersion2Input,
                builder: ::http::request::Builder
            ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    let mut uri = ::std::string::String::new();
    uri_base(input, &mut uri)?;
    uri_query(input, &mut uri)?;
    ::std::result::Result::Ok(builder.method("GET").uri(uri))
}
let mut builder = update_http_builder(&input, ::http::request::Builder::new())?;
builder
                    };
                    let body = ::aws_smithy_types::body::SdkBody::from("");
                    
                    ::std::result::Result::Ok(request_builder.body(body).expect("valid request").try_into().unwrap())
                }
            }
#[derive(Debug)]
            struct GetBucketVersion2EndpointParamsInterceptor;

            impl ::aws_smithy_runtime_api::client::interceptors::Intercept for GetBucketVersion2EndpointParamsInterceptor {
                fn name(&self) -> &'static str {
                    "GetBucketVersion2EndpointParamsInterceptor"
                }

                fn read_before_execution(
                    &self,
                    context: &::aws_smithy_runtime_api::client::interceptors::context::BeforeSerializationInterceptorContextRef<'_, ::aws_smithy_runtime_api::client::interceptors::context::Input, ::aws_smithy_runtime_api::client::interceptors::context::Output, ::aws_smithy_runtime_api::client::interceptors::context::Error>,
                    cfg: &mut ::aws_smithy_types::config_bag::ConfigBag,
                ) -> ::std::result::Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
                    let _input = context.input()
                        .downcast_ref::<GetBucketVersion2Input>()
                        .ok_or("failed to downcast to GetBucketVersion2Input")?;

                    

                    let params = crate::config::endpoint::Params::builder()
                        
                        .build()
                        .map_err(|err| ::aws_smithy_runtime_api::client::interceptors::error::ContextAttachedError::new("endpoint params could not be built", err))?;
                    cfg.interceptor_state().store_put(::aws_smithy_runtime_api::client::endpoint::EndpointResolverParams::new(params));
                    ::std::result::Result::Ok(())
                }
            }

/// Error type for the `GetBucketVersion2Error` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GetBucketVersion2Error {
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
                    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetBucketVersion2Error) for what information is available for the error.")]
                    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl GetBucketVersion2Error {
    /// Creates the `GetBucketVersion2Error::Unhandled` variant from any error type.
                    pub fn unhandled(err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>) -> Self {
                        Self::Unhandled(crate::error::sealed_unhandled::Unhandled { source: err.into(), meta: ::std::default::Default::default() })
                    }
    
                    /// Creates the `GetBucketVersion2Error::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
                    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                        Self::Unhandled(crate::error::sealed_unhandled::Unhandled { source: err.clone().into(), meta: err })
                    }
    /// 
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    /// 
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::Unhandled(e) => &e.meta,
        }
    }
}
impl ::std::error::Error for GetBucketVersion2Error {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::Unhandled(_inner) => {
                ::std::option::Option::Some(&*_inner.source)
            }
        }
    }
}
impl ::std::fmt::Display for GetBucketVersion2Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Unhandled(_inner) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                                                    write!(f, "unhandled error ({code})")
                                                } else {
                                                    f.write_str("unhandled error")
                                                }
            }
        }
    }
}
impl ::aws_smithy_types::retry::ProvideErrorKind for GetBucketVersion2Error {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetBucketVersion2Error {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::Unhandled(_inner) => {
                &_inner.meta
            }
        }
    }
}
impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetBucketVersion2Error {
    fn create_unhandled_error(
                        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
                        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>
                    ) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled { source, meta: meta.unwrap_or_default() })
    }
}

pub use crate::operation::get_bucket_version2::_get_bucket_version2_output::GetBucketVersion2Output;

pub use crate::operation::get_bucket_version2::_get_bucket_version2_input::GetBucketVersion2Input;

mod _get_bucket_version2_input;

mod _get_bucket_version2_output;

/// Builders
pub mod builders;

