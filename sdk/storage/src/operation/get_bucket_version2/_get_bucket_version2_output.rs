// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBucketVersion2Output  {
    #[allow(missing_docs)] // documentation missing in model
    pub common_prefixes: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub contents: ::std::option::Option<::std::vec::Vec::<crate::types::Contents>>,
    #[allow(missing_docs)] // documentation missing in model
    pub content_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub continuation_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub delimiter: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub encoding_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub is_truncated: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub key_count: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_keys: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_continuation_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub prefix: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub start_after: ::std::option::Option<::std::string::String>,
}
impl  GetBucketVersion2Output  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn common_prefixes(&self) -> ::std::option::Option<& str> {
        self.common_prefixes.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contents.is_none()`.
    pub fn contents(&self) -> & [crate::types::Contents] {
        self.contents.as_deref()
        .unwrap_or_default()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(&self) -> ::std::option::Option<& str> {
        self.content_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn continuation_token(&self) -> ::std::option::Option<& str> {
        self.continuation_token.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn delimiter(&self) -> ::std::option::Option<& str> {
        self.delimiter.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn encoding_type(&self) -> ::std::option::Option<& str> {
        self.encoding_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(&self) -> ::std::option::Option<bool> {
        self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_count(&self) -> ::std::option::Option<& str> {
        self.key_count.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(&self) -> ::std::option::Option<& str> {
        self.max_keys.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_continuation_token(&self) -> ::std::option::Option<& str> {
        self.next_continuation_token.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(&self) -> ::std::option::Option<& str> {
        self.prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn start_after(&self) -> ::std::option::Option<& str> {
        self.start_after.as_deref()
    }
}
impl GetBucketVersion2Output {
    /// Creates a new builder-style object to manufacture [`GetBucketVersion2Output`](crate::operation::get_bucket_version2::GetBucketVersion2Output).
    pub fn builder() -> crate::operation::get_bucket_version2::builders::GetBucketVersion2OutputBuilder {
        crate::operation::get_bucket_version2::builders::GetBucketVersion2OutputBuilder::default()
    }
}

/// A builder for [`GetBucketVersion2Output`](crate::operation::get_bucket_version2::GetBucketVersion2Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetBucketVersion2OutputBuilder {
    pub(crate) common_prefixes: ::std::option::Option<::std::string::String>,
    pub(crate) contents: ::std::option::Option<::std::vec::Vec::<crate::types::Contents>>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) continuation_token: ::std::option::Option<::std::string::String>,
    pub(crate) delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) encoding_type: ::std::option::Option<::std::string::String>,
    pub(crate) is_truncated: ::std::option::Option<bool>,
    pub(crate) key_count: ::std::option::Option<::std::string::String>,
    pub(crate) max_keys: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) next_continuation_token: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) start_after: ::std::option::Option<::std::string::String>,
}
impl GetBucketVersion2OutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn common_prefixes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.common_prefixes = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_common_prefixes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.common_prefixes = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_common_prefixes(&self) -> &::std::option::Option<::std::string::String> {
        &self.common_prefixes
    }
    /// Appends an item to `contents`.
    ///
    /// To override the contents of this collection use [`set_contents`](Self::set_contents).
    ///
    pub fn contents(mut self, input: crate::types::Contents) -> Self {
        let mut v = self.contents.unwrap_or_default();
                        v.push(input);
                        self.contents = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_contents(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Contents>>) -> Self {
        self.contents = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_contents(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Contents>> {
        &self.contents
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continuation_token = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.continuation_token
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delimiter = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delimiter = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.delimiter
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn encoding_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encoding_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_encoding_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encoding_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_encoding_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.encoding_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_is_truncated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_truncated = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_is_truncated(&self) -> &::std::option::Option<bool> {
        &self.is_truncated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key_count(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_count = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_key_count(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_count = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_key_count(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_keys = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_keys(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_keys = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_keys(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_keys
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_continuation_token = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_continuation_token
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn start_after(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_after = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_start_after(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_after = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_start_after(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_after
    }
    /// Consumes the builder and constructs a [`GetBucketVersion2Output`](crate::operation::get_bucket_version2::GetBucketVersion2Output).
    pub fn build(self) -> crate::operation::get_bucket_version2::GetBucketVersion2Output {
        crate::operation::get_bucket_version2::GetBucketVersion2Output {
            common_prefixes: self.common_prefixes
            ,
            contents: self.contents
            ,
            content_type: self.content_type
            ,
            continuation_token: self.continuation_token
            ,
            delimiter: self.delimiter
            ,
            encoding_type: self.encoding_type
            ,
            is_truncated: self.is_truncated
            ,
            key_count: self.key_count
            ,
            max_keys: self.max_keys
            ,
            name: self.name
            ,
            next_continuation_token: self.next_continuation_token
            ,
            prefix: self.prefix
            ,
            start_after: self.start_after
            ,
        }
    }
}

