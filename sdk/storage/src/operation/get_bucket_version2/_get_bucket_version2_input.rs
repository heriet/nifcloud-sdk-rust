// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBucketVersion2Input  {
    #[allow(missing_docs)] // documentation missing in model
    pub bucket: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub continuation_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub delimiter: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub encoding_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub fetch_owner: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub list_type: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub marker: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_keys: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub prefix: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub start_after: ::std::option::Option<::std::string::String>,
}
impl  GetBucketVersion2Input  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn bucket(&self) -> ::std::option::Option<& str> {
        self.bucket.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn continuation_token(&self) -> ::std::option::Option<& str> {
        self.continuation_token.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn delimiter(&self) -> ::std::option::Option<& str> {
        self.delimiter.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn encoding_type(&self) -> ::std::option::Option<& str> {
        self.encoding_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn fetch_owner(&self) -> ::std::option::Option<& str> {
        self.fetch_owner.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn list_type(&self) -> ::std::option::Option<& str> {
        self.list_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn marker(&self) -> ::std::option::Option<& str> {
        self.marker.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(&self) -> ::std::option::Option<& str> {
        self.max_keys.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(&self) -> ::std::option::Option<& str> {
        self.prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn start_after(&self) -> ::std::option::Option<& str> {
        self.start_after.as_deref()
    }
}
impl GetBucketVersion2Input {
    /// Creates a new builder-style object to manufacture [`GetBucketVersion2Input`](crate::operation::get_bucket_version2::GetBucketVersion2Input).
    pub fn builder() -> crate::operation::get_bucket_version2::builders::GetBucketVersion2InputBuilder {
        crate::operation::get_bucket_version2::builders::GetBucketVersion2InputBuilder::default()
    }
}

/// A builder for [`GetBucketVersion2Input`](crate::operation::get_bucket_version2::GetBucketVersion2Input).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetBucketVersion2InputBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) continuation_token: ::std::option::Option<::std::string::String>,
    pub(crate) delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) encoding_type: ::std::option::Option<::std::string::String>,
    pub(crate) fetch_owner: ::std::option::Option<::std::string::String>,
    pub(crate) list_type: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_keys: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) start_after: ::std::option::Option<::std::string::String>,
}
impl GetBucketVersion2InputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continuation_token = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.continuation_token
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delimiter = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delimiter = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.delimiter
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn encoding_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encoding_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_encoding_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encoding_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_encoding_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.encoding_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn fetch_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fetch_owner = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_fetch_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fetch_owner = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_fetch_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.fetch_owner
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn list_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.list_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_list_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.list_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_list_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.list_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_keys = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_keys(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_keys = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_keys(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_keys
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn start_after(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_after = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_start_after(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_after = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_start_after(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_after
    }
    /// Consumes the builder and constructs a [`GetBucketVersion2Input`](crate::operation::get_bucket_version2::GetBucketVersion2Input).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_bucket_version2::GetBucketVersion2Input, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::get_bucket_version2::GetBucketVersion2Input {
                bucket: self.bucket
                ,
                continuation_token: self.continuation_token
                ,
                delimiter: self.delimiter
                ,
                encoding_type: self.encoding_type
                ,
                fetch_owner: self.fetch_owner
                ,
                list_type: self.list_type
                ,
                marker: self.marker
                ,
                max_keys: self.max_keys
                ,
                prefix: self.prefix
                ,
                start_after: self.start_after
                ,
            }
        )
    }
}

