// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestPart  {
    #[allow(missing_docs)] // documentation missing in model
    pub e_tag: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub part_number: i32,
}
impl  RequestPart  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn e_tag(&self) -> & str {
        use std::ops::Deref; self.e_tag.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn part_number(&self) -> i32 {
        self.part_number
    }
}
impl RequestPart {
    /// Creates a new builder-style object to manufacture [`RequestPart`](crate::types::RequestPart).
    pub fn builder() -> crate::types::builders::RequestPartBuilder {
        crate::types::builders::RequestPartBuilder::default()
    }
}

/// A builder for [`RequestPart`](crate::types::RequestPart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestPartBuilder {
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) part_number: ::std::option::Option<i32>,
}
impl RequestPartBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn part_number(mut self, input: i32) -> Self {
        self.part_number = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_part_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.part_number = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_part_number(&self) -> &::std::option::Option<i32> {
        &self.part_number
    }
    /// Consumes the builder and constructs a [`RequestPart`](crate::types::RequestPart).
    /// This method will fail if any of the following fields are not set:
    /// - [`e_tag`](crate::types::builders::RequestPartBuilder::e_tag)
    /// - [`part_number`](crate::types::builders::RequestPartBuilder::part_number)
    pub fn build(self) -> ::std::result::Result<crate::types::RequestPart, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::RequestPart {
                e_tag: self.e_tag
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("e_tag", "e_tag was not specified but it is required when building RequestPart")
                    )?
                ,
                part_number: self.part_number
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("part_number", "part_number was not specified but it is required when building RequestPart")
                    )?
                ,
            }
        )
    }
}

