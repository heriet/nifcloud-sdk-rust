// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoncurrentVersionExpiration  {
    #[allow(missing_docs)] // documentation missing in model
    pub noncurrent_days: ::std::option::Option<i32>,
}
impl  NoncurrentVersionExpiration  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn noncurrent_days(&self) -> ::std::option::Option<i32> {
        self.noncurrent_days
    }
}
impl NoncurrentVersionExpiration {
    /// Creates a new builder-style object to manufacture [`NoncurrentVersionExpiration`](crate::types::NoncurrentVersionExpiration).
    pub fn builder() -> crate::types::builders::NoncurrentVersionExpirationBuilder {
        crate::types::builders::NoncurrentVersionExpirationBuilder::default()
    }
}

/// A builder for [`NoncurrentVersionExpiration`](crate::types::NoncurrentVersionExpiration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NoncurrentVersionExpirationBuilder {
    pub(crate) noncurrent_days: ::std::option::Option<i32>,
}
impl NoncurrentVersionExpirationBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn noncurrent_days(mut self, input: i32) -> Self {
        self.noncurrent_days = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_noncurrent_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.noncurrent_days = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_noncurrent_days(&self) -> &::std::option::Option<i32> {
        &self.noncurrent_days
    }
    /// Consumes the builder and constructs a [`NoncurrentVersionExpiration`](crate::types::NoncurrentVersionExpiration).
    pub fn build(self) -> crate::types::NoncurrentVersionExpiration {
        crate::types::NoncurrentVersionExpiration {
            noncurrent_days: self.noncurrent_days
            ,
        }
    }
}

