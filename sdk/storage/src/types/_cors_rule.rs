// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CorsRule  {
    #[allow(missing_docs)] // documentation missing in model
    pub allowed_header: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub allowed_method: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    #[allow(missing_docs)] // documentation missing in model
    pub allowed_origin: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub expose_header: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_age_seconds: ::std::option::Option<i32>,
}
impl  CorsRule  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn allowed_header(&self) -> ::std::option::Option<& str> {
        self.allowed_header.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_method.is_none()`.
    pub fn allowed_method(&self) -> & [::std::string::String] {
        self.allowed_method.as_deref()
        .unwrap_or_default()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn allowed_origin(&self) -> ::std::option::Option<& str> {
        self.allowed_origin.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn expose_header(&self) -> ::std::option::Option<& str> {
        self.expose_header.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_age_seconds(&self) -> ::std::option::Option<i32> {
        self.max_age_seconds
    }
}
impl CorsRule {
    /// Creates a new builder-style object to manufacture [`CorsRule`](crate::types::CorsRule).
    pub fn builder() -> crate::types::builders::CorsRuleBuilder {
        crate::types::builders::CorsRuleBuilder::default()
    }
}

/// A builder for [`CorsRule`](crate::types::CorsRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CorsRuleBuilder {
    pub(crate) allowed_header: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_method: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) allowed_origin: ::std::option::Option<::std::string::String>,
    pub(crate) expose_header: ::std::option::Option<::std::string::String>,
    pub(crate) max_age_seconds: ::std::option::Option<i32>,
}
impl CorsRuleBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn allowed_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allowed_header = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_allowed_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allowed_header = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_allowed_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.allowed_header
    }
    /// Appends an item to `allowed_method`.
    ///
    /// To override the contents of this collection use [`set_allowed_method`](Self::set_allowed_method).
    ///
    pub fn allowed_method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_method.unwrap_or_default();
                        v.push(input.into());
                        self.allowed_method = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_allowed_method(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.allowed_method = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_allowed_method(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.allowed_method
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn allowed_origin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allowed_origin = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_allowed_origin(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allowed_origin = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_allowed_origin(&self) -> &::std::option::Option<::std::string::String> {
        &self.allowed_origin
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn expose_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expose_header = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_expose_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expose_header = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_expose_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.expose_header
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_age_seconds(mut self, input: i32) -> Self {
        self.max_age_seconds = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_age_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_age_seconds = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_age_seconds(&self) -> &::std::option::Option<i32> {
        &self.max_age_seconds
    }
    /// Consumes the builder and constructs a [`CorsRule`](crate::types::CorsRule).
    pub fn build(self) -> crate::types::CorsRule {
        crate::types::CorsRule {
            allowed_header: self.allowed_header
            ,
            allowed_method: self.allowed_method
            ,
            allowed_origin: self.allowed_origin
            ,
            expose_header: self.expose_header
            ,
            max_age_seconds: self.max_age_seconds
            ,
        }
    }
}

