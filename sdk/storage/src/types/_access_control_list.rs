// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessControlList  {
    #[allow(missing_docs)] // documentation missing in model
    pub grant: ::std::option::Option<crate::types::Grant>,
}
impl  AccessControlList  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn grant(&self) -> ::std::option::Option<& crate::types::Grant> {
        self.grant.as_ref()
    }
}
impl AccessControlList {
    /// Creates a new builder-style object to manufacture [`AccessControlList`](crate::types::AccessControlList).
    pub fn builder() -> crate::types::builders::AccessControlListBuilder {
        crate::types::builders::AccessControlListBuilder::default()
    }
}

/// A builder for [`AccessControlList`](crate::types::AccessControlList).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessControlListBuilder {
    pub(crate) grant: ::std::option::Option<crate::types::Grant>,
}
impl AccessControlListBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn grant(mut self, input: crate::types::Grant) -> Self {
        self.grant = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_grant(mut self, input: ::std::option::Option<crate::types::Grant>) -> Self {
        self.grant = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_grant(&self) -> &::std::option::Option<crate::types::Grant> {
        &self.grant
    }
    /// Consumes the builder and constructs a [`AccessControlList`](crate::types::AccessControlList).
    pub fn build(self) -> crate::types::AccessControlList {
        crate::types::AccessControlList {
            grant: self.grant
            ,
        }
    }
}

