// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestTagSet  {
    #[allow(missing_docs)] // documentation missing in model
    pub request_tag: ::std::option::Option<crate::types::RequestTag>,
}
impl  RequestTagSet  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn request_tag(&self) -> ::std::option::Option<& crate::types::RequestTag> {
        self.request_tag.as_ref()
    }
}
impl RequestTagSet {
    /// Creates a new builder-style object to manufacture [`RequestTagSet`](crate::types::RequestTagSet).
    pub fn builder() -> crate::types::builders::RequestTagSetBuilder {
        crate::types::builders::RequestTagSetBuilder::default()
    }
}

/// A builder for [`RequestTagSet`](crate::types::RequestTagSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestTagSetBuilder {
    pub(crate) request_tag: ::std::option::Option<crate::types::RequestTag>,
}
impl RequestTagSetBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn request_tag(mut self, input: crate::types::RequestTag) -> Self {
        self.request_tag = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_request_tag(mut self, input: ::std::option::Option<crate::types::RequestTag>) -> Self {
        self.request_tag = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_request_tag(&self) -> &::std::option::Option<crate::types::RequestTag> {
        &self.request_tag
    }
    /// Consumes the builder and constructs a [`RequestTagSet`](crate::types::RequestTagSet).
    pub fn build(self) -> crate::types::RequestTagSet {
        crate::types::RequestTagSet {
            request_tag: self.request_tag
            ,
        }
    }
}

