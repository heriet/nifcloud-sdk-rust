// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagSet  {
    #[allow(missing_docs)] // documentation missing in model
    pub tag: ::std::option::Option<crate::types::Tag>,
}
impl  TagSet  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn tag(&self) -> ::std::option::Option<& crate::types::Tag> {
        self.tag.as_ref()
    }
}
impl TagSet {
    /// Creates a new builder-style object to manufacture [`TagSet`](crate::types::TagSet).
    pub fn builder() -> crate::types::builders::TagSetBuilder {
        crate::types::builders::TagSetBuilder::default()
    }
}

/// A builder for [`TagSet`](crate::types::TagSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagSetBuilder {
    pub(crate) tag: ::std::option::Option<crate::types::Tag>,
}
impl TagSetBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn tag(mut self, input: crate::types::Tag) -> Self {
        self.tag = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tag(mut self, input: ::std::option::Option<crate::types::Tag>) -> Self {
        self.tag = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tag(&self) -> &::std::option::Option<crate::types::Tag> {
        &self.tag
    }
    /// Consumes the builder and constructs a [`TagSet`](crate::types::TagSet).
    pub fn build(self) -> crate::types::TagSet {
        crate::types::TagSet {
            tag: self.tag
            ,
        }
    }
}

