// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Upload  {
    #[allow(missing_docs)] // documentation missing in model
    pub display_name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub initiated: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub initiator: ::std::option::Option<crate::types::Initiator>,
    #[allow(missing_docs)] // documentation missing in model
    pub key: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub owner: ::std::option::Option<crate::types::Owner>,
    #[allow(missing_docs)] // documentation missing in model
    pub storage_class: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub upload_id: ::std::option::Option<::std::string::String>,
}
impl  Upload  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn display_name(&self) -> ::std::option::Option<& str> {
        self.display_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn initiated(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.initiated.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn initiator(&self) -> ::std::option::Option<& crate::types::Initiator> {
        self.initiator.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key(&self) -> ::std::option::Option<& str> {
        self.key.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn owner(&self) -> ::std::option::Option<& crate::types::Owner> {
        self.owner.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn storage_class(&self) -> ::std::option::Option<& str> {
        self.storage_class.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn upload_id(&self) -> ::std::option::Option<& str> {
        self.upload_id.as_deref()
    }
}
impl Upload {
    /// Creates a new builder-style object to manufacture [`Upload`](crate::types::Upload).
    pub fn builder() -> crate::types::builders::UploadBuilder {
        crate::types::builders::UploadBuilder::default()
    }
}

/// A builder for [`Upload`](crate::types::Upload).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UploadBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) initiated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) initiator: ::std::option::Option<crate::types::Initiator>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<crate::types::Owner>,
    pub(crate) storage_class: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
}
impl UploadBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn initiated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.initiated = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_initiated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.initiated = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_initiated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.initiated
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn initiator(mut self, input: crate::types::Initiator) -> Self {
        self.initiator = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_initiator(mut self, input: ::std::option::Option<crate::types::Initiator>) -> Self {
        self.initiator = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_initiator(&self) -> &::std::option::Option<crate::types::Initiator> {
        &self.initiator
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn owner(mut self, input: crate::types::Owner) -> Self {
        self.owner = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::Owner>) -> Self {
        self.owner = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::Owner> {
        &self.owner
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn storage_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_class = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_storage_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_class = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_storage_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_class
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// Consumes the builder and constructs a [`Upload`](crate::types::Upload).
    pub fn build(self) -> crate::types::Upload {
        crate::types::Upload {
            display_name: self.display_name
            ,
            id: self.id
            ,
            initiated: self.initiated
            ,
            initiator: self.initiator
            ,
            key: self.key
            ,
            owner: self.owner
            ,
            storage_class: self.storage_class
            ,
            upload_id: self.upload_id
            ,
        }
    }
}

