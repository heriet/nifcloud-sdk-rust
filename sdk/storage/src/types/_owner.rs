// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Owner  {
    #[allow(missing_docs)] // documentation missing in model
    pub display_name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::option::Option<::std::string::String>,
}
impl  Owner  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn display_name(&self) -> ::std::option::Option<& str> {
        self.display_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
}
impl Owner {
    /// Creates a new builder-style object to manufacture [`Owner`](crate::types::Owner).
    pub fn builder() -> crate::types::builders::OwnerBuilder {
        crate::types::builders::OwnerBuilder::default()
    }
}

/// A builder for [`Owner`](crate::types::Owner).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OwnerBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl OwnerBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`Owner`](crate::types::Owner).
    pub fn build(self) -> crate::types::Owner {
        crate::types::Owner {
            display_name: self.display_name
            ,
            id: self.id
            ,
        }
    }
}

