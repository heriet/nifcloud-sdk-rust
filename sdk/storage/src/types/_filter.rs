// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filter  {
    #[allow(missing_docs)] // documentation missing in model
    pub and: ::std::option::Option<crate::types::And>,
}
impl  Filter  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn and(&self) -> ::std::option::Option<& crate::types::And> {
        self.and.as_ref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) and: ::std::option::Option<crate::types::And>,
}
impl FilterBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn and(mut self, input: crate::types::And) -> Self {
        self.and = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_and(mut self, input: ::std::option::Option<crate::types::And>) -> Self {
        self.and = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_and(&self) -> &::std::option::Option<crate::types::And> {
        &self.and
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            and: self.and
            ,
        }
    }
}

