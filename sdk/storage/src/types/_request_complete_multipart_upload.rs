// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestCompleteMultipartUpload  {
    #[allow(missing_docs)] // documentation missing in model
    pub list_of_request_part: ::std::vec::Vec::<crate::types::RequestPart>,
}
impl  RequestCompleteMultipartUpload  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn list_of_request_part(&self) -> & [crate::types::RequestPart] {
        use std::ops::Deref; self.list_of_request_part.deref()
    }
}
impl RequestCompleteMultipartUpload {
    /// Creates a new builder-style object to manufacture [`RequestCompleteMultipartUpload`](crate::types::RequestCompleteMultipartUpload).
    pub fn builder() -> crate::types::builders::RequestCompleteMultipartUploadBuilder {
        crate::types::builders::RequestCompleteMultipartUploadBuilder::default()
    }
}

/// A builder for [`RequestCompleteMultipartUpload`](crate::types::RequestCompleteMultipartUpload).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestCompleteMultipartUploadBuilder {
    pub(crate) list_of_request_part: ::std::option::Option<::std::vec::Vec::<crate::types::RequestPart>>,
}
impl RequestCompleteMultipartUploadBuilder {
    /// Appends an item to `list_of_request_part`.
    ///
    /// To override the contents of this collection use [`set_list_of_request_part`](Self::set_list_of_request_part).
    ///
    pub fn list_of_request_part(mut self, input: crate::types::RequestPart) -> Self {
        let mut v = self.list_of_request_part.unwrap_or_default();
                        v.push(input);
                        self.list_of_request_part = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_list_of_request_part(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::RequestPart>>) -> Self {
        self.list_of_request_part = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_list_of_request_part(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::RequestPart>> {
        &self.list_of_request_part
    }
    /// Consumes the builder and constructs a [`RequestCompleteMultipartUpload`](crate::types::RequestCompleteMultipartUpload).
    /// This method will fail if any of the following fields are not set:
    /// - [`list_of_request_part`](crate::types::builders::RequestCompleteMultipartUploadBuilder::list_of_request_part)
    pub fn build(self) -> ::std::result::Result<crate::types::RequestCompleteMultipartUpload, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::RequestCompleteMultipartUpload {
                list_of_request_part: self.list_of_request_part
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("list_of_request_part", "list_of_request_part was not specified but it is required when building RequestCompleteMultipartUpload")
                    )?
                ,
            }
        )
    }
}

