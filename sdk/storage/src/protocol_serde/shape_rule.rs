// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_rule(decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::types::Rule, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Rule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Expiration") /* Expiration com.nifcloud.api.storage#Rule$Expiration */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_expiration::de_expiration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_expiration(var_1);
            }
            ,
            s if s.matches("Filter") /* Filter com.nifcloud.api.storage#Rule$Filter */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_filter::de_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_2);
            }
            ,
            s if s.matches("ID") /* ID com.nifcloud.api.storage#Rule$ID */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_3);
            }
            ,
            s if s.matches("NoncurrentVersionExpiration") /* NoncurrentVersionExpiration com.nifcloud.api.storage#Rule$NoncurrentVersionExpiration */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_noncurrent_version_expiration::de_noncurrent_version_expiration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_noncurrent_version_expiration(var_4);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.nifcloud.api.storage#Rule$Prefix */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_5);
            }
            ,
            s if s.matches("Status") /* Status com.nifcloud.api.storage#Rule$Status */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

