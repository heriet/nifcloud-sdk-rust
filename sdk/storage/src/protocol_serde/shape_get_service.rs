// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_service_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::get_service::GetServiceOutput, crate::operation::get_service::GetServiceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::get_service::GetServiceError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::get_service::GetServiceError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_service_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::get_service::GetServiceOutput, crate::operation::get_service::GetServiceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_service::builders::GetServiceOutputBuilder::default();
        output = crate::protocol_serde::shape_get_service::de_get_service(_response_body, output).map_err(crate::operation::get_service::GetServiceError::unhandled)?;
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_service(inp: &[u8], mut builder: crate::operation::get_service::builders::GetServiceOutputBuilder) -> Result<crate::operation::get_service::builders::GetServiceOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("ListAllMyBucketsResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected ListAllMyBucketsResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Owner") /* Owner com.nifcloud.api.storage.synthetic#GetServiceOutput$Owner */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_owner::de_owner(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_owner(var_1);
            }
            ,
            s if s.matches("Buckets") /* Buckets com.nifcloud.api.storage.synthetic#GetServiceOutput$Buckets */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_list_of_buckets::de_list_of_buckets(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_buckets(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

