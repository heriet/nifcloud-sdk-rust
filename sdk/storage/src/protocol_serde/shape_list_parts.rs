// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_parts_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_parts::ListPartsOutput, crate::operation::list_parts::ListPartsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::list_parts::ListPartsError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::list_parts::ListPartsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_parts_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_parts::ListPartsOutput, crate::operation::list_parts::ListPartsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_parts::builders::ListPartsOutputBuilder::default();
        output = crate::protocol_serde::shape_list_parts::de_list_parts(_response_body, output).map_err(crate::operation::list_parts::ListPartsError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_list_parts_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::list_parts::ListPartsError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_list_parts(inp: &[u8], mut builder: crate::operation::list_parts::builders::ListPartsOutputBuilder) -> Result<crate::operation::list_parts::builders::ListPartsOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("ListPartsResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected ListPartsResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Owner") /* Owner com.nifcloud.api.storage.synthetic#ListPartsOutput$Owner */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_owner::de_owner(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_owner(var_1);
            }
            ,
            s if s.matches("NextPartNumberMarker") /* NextPartNumberMarker com.nifcloud.api.storage.synthetic#ListPartsOutput$NextPartNumberMarker */ =>  {
                let var_2 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_next_part_number_marker(var_2);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.nifcloud.api.storage.synthetic#ListPartsOutput$StorageClass */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_3);
            }
            ,
            s if s.matches("Encoding-Type") /* EncodingType com.nifcloud.api.storage.synthetic#ListPartsOutput$EncodingType */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_encoding_type(var_4);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.nifcloud.api.storage.synthetic#ListPartsOutput$IsTruncated */ =>  {
                let var_5 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `smithy.api#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_5);
            }
            ,
            s if s.matches("MaxParts") /* MaxParts com.nifcloud.api.storage.synthetic#ListPartsOutput$MaxParts */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_parts(var_6);
            }
            ,
            s if s.matches("UploadId") /* UploadId com.nifcloud.api.storage.synthetic#ListPartsOutput$UploadId */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upload_id(var_7);
            }
            ,
            s if s.matches("PartNumberMarker") /* PartNumberMarker com.nifcloud.api.storage.synthetic#ListPartsOutput$PartNumberMarker */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_part_number_marker(var_8);
            }
            ,
            s if s.matches("Bucket") /* Bucket com.nifcloud.api.storage.synthetic#ListPartsOutput$Bucket */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_9);
            }
            ,
            s if s.matches("Initiator") /* Initiator com.nifcloud.api.storage.synthetic#ListPartsOutput$Initiator */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_initiator::de_initiator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_initiator(var_10);
            }
            ,
            s if s.matches("Part") /* Part com.nifcloud.api.storage.synthetic#ListPartsOutput$Part */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::vec::Vec::<crate::types::Part>, ::aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_12 = builder.part.take().unwrap_or_default();
                            list_12.push(
                                crate::protocol_serde::shape_part::de_part(&mut tag)
                                ?
                            );
                            list_12
                        })
                        ?
                    )
                ;
                builder = builder.set_part(var_11);
            }
            ,
            s if s.matches("Key") /* Key com.nifcloud.api.storage.synthetic#ListPartsOutput$Key */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

