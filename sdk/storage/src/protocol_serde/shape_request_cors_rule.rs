// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_cors_rule(input: &crate::types::RequestCorsRule, writer: ::aws_smithy_xml::encode::ElWriter) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.allowed_header {
        let mut inner_writer = scope.start_el("AllowedHeader").finish();
        inner_writer.data(
            var_1.as_str()
        );
    }
     {
        let mut inner_writer = scope.start_el("AllowedOrigin").finish();
        inner_writer.data(
            input.allowed_origin.as_str()
        );
    }
    if let Some(var_2) = &input.expose_header {
        let mut inner_writer = scope.start_el("ExposeHeader").finish();
        inner_writer.data(
            var_2.as_str()
        );
    }
    if let Some(var_3) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(
            var_3.as_str()
        );
    }
     {
        for list_item_4 in &input.list_of_request_allowed_method {
             {
                let mut inner_writer = scope.start_el("AllowedMethod").finish();
                inner_writer.data(
                    list_item_4.as_str()
                );
            }
        }
    }
    if let Some(var_5) = &input.max_age_seconds {
        let mut inner_writer = scope.start_el("MaxAgeSeconds").finish();
        inner_writer.data(
            ::aws_smithy_types::primitive::Encoder::from(*var_5).encode()
        );
    }
    scope.finish();
    Ok(())
}

