// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_multiple_objects_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::delete_multiple_objects::DeleteMultipleObjectsOutput, crate::operation::delete_multiple_objects::DeleteMultipleObjectsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::delete_multiple_objects::DeleteMultipleObjectsError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::delete_multiple_objects::DeleteMultipleObjectsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_multiple_objects_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::delete_multiple_objects::DeleteMultipleObjectsOutput, crate::operation::delete_multiple_objects::DeleteMultipleObjectsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_multiple_objects::builders::DeleteMultipleObjectsOutputBuilder::default();
        output = crate::protocol_serde::shape_delete_multiple_objects::de_delete_multiple_objects(_response_body, output).map_err(crate::operation::delete_multiple_objects::DeleteMultipleObjectsError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_delete_multiple_objects_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::delete_multiple_objects::DeleteMultipleObjectsError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output.build()
    })
}

pub fn ser_delete_multiple_objects_headers(
                    input: &crate::operation::delete_multiple_objects::DeleteMultipleObjectsInput,
                    mut builder: ::http::request::Builder
                ) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.content_md5 {
        let formatted_2 = inner_1.as_str();
                        if !formatted_2.is_empty() {
                            let header_value = formatted_2;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("content_md5", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("Content-MD5", header_value);
                        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn de_delete_multiple_objects(inp: &[u8], mut builder: crate::operation::delete_multiple_objects::builders::DeleteMultipleObjectsOutputBuilder) -> Result<crate::operation::delete_multiple_objects::builders::DeleteMultipleObjectsOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("DeleteMultipleObjectsResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected DeleteMultipleObjectsResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Deleted") /* Deleted com.nifcloud.api.storage.synthetic#DeleteMultipleObjectsOutput$Deleted */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::vec::Vec::<crate::types::Deleted>, ::aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_4 = builder.deleted.take().unwrap_or_default();
                            list_4.push(
                                crate::protocol_serde::shape_deleted::de_deleted(&mut tag)
                                ?
                            );
                            list_4
                        })
                        ?
                    )
                ;
                builder = builder.set_deleted(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

