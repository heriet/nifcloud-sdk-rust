// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_rule(input: &crate::types::RequestRule, writer: ::aws_smithy_xml::encode::ElWriter) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
     {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(
            input.id.as_str()
        );
    }
    if let Some(var_1) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(
            var_1.as_str()
        );
    }
    if let Some(var_2) = &input.request_expiration {
        let inner_writer = scope.start_el("Expiration");
        crate::protocol_serde::shape_request_expiration::ser_request_expiration(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.request_filter {
        let inner_writer = scope.start_el("Filter");
        crate::protocol_serde::shape_request_filter::ser_request_filter(var_3, inner_writer)?
    }
    if let Some(var_4) = &input.request_noncurrent_version_expiration {
        let inner_writer = scope.start_el("NoncurrentVersionExpiration");
        crate::protocol_serde::shape_request_noncurrent_version_expiration::ser_request_noncurrent_version_expiration(var_4, inner_writer)?
    }
    if let Some(var_5) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(
            var_5.as_str()
        );
    }
    scope.finish();
    Ok(())
}

