// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_upload_part_copy_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::upload_part_copy::UploadPartCopyOutput, crate::operation::upload_part_copy::UploadPartCopyError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::upload_part_copy::UploadPartCopyError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::upload_part_copy::UploadPartCopyError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_upload_part_copy_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::upload_part_copy::UploadPartCopyOutput, crate::operation::upload_part_copy::UploadPartCopyError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::upload_part_copy::builders::UploadPartCopyOutputBuilder::default();
        output = crate::protocol_serde::shape_upload_part_copy::de_upload_part_copy(_response_body, output).map_err(crate::operation::upload_part_copy::UploadPartCopyError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_upload_part_copy_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::upload_part_copy::UploadPartCopyError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output = output.set_x_amz_copy_source_version_id(
            crate::protocol_serde::shape_upload_part_copy_output::de_x_amz_copy_source_version_id_header(_response_headers)
                                    .map_err(|_|crate::operation::upload_part_copy::UploadPartCopyError::unhandled("Failed to parse XAmzCopySourceVersionId from header `x-amz-copy-source-version-id"))?
        );
        output = output.set_x_amz_server_side_encryption(
            crate::protocol_serde::shape_upload_part_copy_output::de_x_amz_server_side_encryption_header(_response_headers)
                                    .map_err(|_|crate::operation::upload_part_copy::UploadPartCopyError::unhandled("Failed to parse XAmzServerSideEncryption from header `x-amz-server-side-encryption"))?
        );
        output.build()
    })
}

pub fn ser_upload_part_copy_headers(
                    input: &crate::operation::upload_part_copy::UploadPartCopyInput,
                    mut builder: ::http::request::Builder
                ) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.x_amz_copy_source {
        let formatted_2 = inner_1.as_str();
                        if !formatted_2.is_empty() {
                            let header_value = formatted_2;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_3) = &input.x_amz_copy_source_if_match {
        let formatted_4 = inner_3.as_str();
                        if !formatted_4.is_empty() {
                            let header_value = formatted_4;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_if_match", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-if-match", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_5) = &input.x_amz_copy_source_if_modified_since {
        let formatted_6 = inner_5.as_str();
                        if !formatted_6.is_empty() {
                            let header_value = formatted_6;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_if_modified_since", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-if-modified-since", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_7) = &input.x_amz_copy_source_if_none_match {
        let formatted_8 = inner_7.as_str();
                        if !formatted_8.is_empty() {
                            let header_value = formatted_8;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_if_none_match", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-if-none-match", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_9) = &input.x_amz_copy_source_if_unmodified_since {
        let formatted_10 = inner_9.as_str();
                        if !formatted_10.is_empty() {
                            let header_value = formatted_10;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_if_unmodified_since", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-if-unmodified-since", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_11) = &input.x_amz_copy_source_range {
        let formatted_12 = inner_11.as_str();
                        if !formatted_12.is_empty() {
                            let header_value = formatted_12;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_range", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-range", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_13) = &input.x_amz_copy_source_server_side_encryption_customer_algorithm {
        let formatted_14 = inner_13.as_str();
                        if !formatted_14.is_empty() {
                            let header_value = formatted_14;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_server_side_encryption_customer_algorithm", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-server-side-encryption-customer-algorithm", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_15) = &input.x_amz_copy_source_server_side_encryption_customer_key {
        let formatted_16 = inner_15.as_str();
                        if !formatted_16.is_empty() {
                            let header_value = formatted_16;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_server_side_encryption_customer_key", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-server-side-encryption-customer-key", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_17) = &input.x_amz_copy_source_server_side_encryption_customer_key_md5 {
        let formatted_18 = inner_17.as_str();
                        if !formatted_18.is_empty() {
                            let header_value = formatted_18;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_copy_source_server_side_encryption_customer_key_md5", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-copy-source-server-side-encryption-customer-key-MD5", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_19) = &input.x_amz_server_side_encryption_customer_algorithm {
        let formatted_20 = inner_19.as_str();
                        if !formatted_20.is_empty() {
                            let header_value = formatted_20;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_algorithm", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-algorithm", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_21) = &input.x_amz_server_side_encryption_customer_key {
        let formatted_22 = inner_21.as_str();
                        if !formatted_22.is_empty() {
                            let header_value = formatted_22;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_key", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-key", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_23) = &input.x_amz_server_side_encryption_customer_key_md5 {
        let formatted_24 = inner_23.as_str();
                        if !formatted_24.is_empty() {
                            let header_value = formatted_24;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_key_md5", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-key-MD5", header_value);
                        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn de_upload_part_copy(inp: &[u8], mut builder: crate::operation::upload_part_copy::builders::UploadPartCopyOutputBuilder) -> Result<crate::operation::upload_part_copy::builders::UploadPartCopyOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("UploadPartCopyResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected UploadPartCopyResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LastModified") /* LastModified com.nifcloud.api.storage.synthetic#UploadPartCopyOutput$LastModified */ =>  {
                let var_25 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `smithy.api#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_modified(var_25);
            }
            ,
            s if s.matches("ETag") /* ETag com.nifcloud.api.storage.synthetic#UploadPartCopyOutput$ETag */ =>  {
                let var_26 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_e_tag(var_26);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

