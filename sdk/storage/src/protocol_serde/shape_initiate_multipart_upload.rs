// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_initiate_multipart_upload_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput, crate::operation::initiate_multipart_upload::InitiateMultipartUploadError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_initiate_multipart_upload_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput, crate::operation::initiate_multipart_upload::InitiateMultipartUploadError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadOutputBuilder::default();
        output = crate::protocol_serde::shape_initiate_multipart_upload::de_initiate_multipart_upload(_response_body, output).map_err(crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_initiate_multipart_upload_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output.build()
    })
}

pub fn ser_initiate_multipart_upload_headers(
                    input: &crate::operation::initiate_multipart_upload::InitiateMultipartUploadInput,
                    mut builder: ::http::request::Builder
                ) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.content_disposition {
        let formatted_2 = inner_1.as_str();
                        if !formatted_2.is_empty() {
                            let header_value = formatted_2;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("content_disposition", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("Content-Disposition", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_3) = &input.content_encoding {
        let formatted_4 = inner_3.as_str();
                        if !formatted_4.is_empty() {
                            let header_value = formatted_4;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("content_encoding", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("Content-Encoding", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_5) = &input.content_type {
        let formatted_6 = inner_5.as_str();
                        if !formatted_6.is_empty() {
                            let header_value = formatted_6;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("content_type", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("Content-Type", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_7) = &input.x_amz_meta {
        let formatted_8 = inner_7.as_str();
                        if !formatted_8.is_empty() {
                            let header_value = formatted_8;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_meta", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-meta-", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_9) = &input.x_amz_server_side_encryption {
        let formatted_10 = inner_9.as_str();
                        if !formatted_10.is_empty() {
                            let header_value = formatted_10;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_11) = &input.x_amz_server_side_encryption_customer_algorithm {
        let formatted_12 = inner_11.as_str();
                        if !formatted_12.is_empty() {
                            let header_value = formatted_12;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_algorithm", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-algorithm", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_13) = &input.x_amz_server_side_encryption_customer_key {
        let formatted_14 = inner_13.as_str();
                        if !formatted_14.is_empty() {
                            let header_value = formatted_14;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_key", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-key", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_15) = &input.x_amz_server_side_encryption_customer_key_md5 {
        let formatted_16 = inner_15.as_str();
                        if !formatted_16.is_empty() {
                            let header_value = formatted_16;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_server_side_encryption_customer_key_md5", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-server-side-encryption-customer-key-MD5", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_17) = &input.x_amz_storage_class {
        let formatted_18 = inner_17.as_str();
                        if !formatted_18.is_empty() {
                            let header_value = formatted_18;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_storage_class", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-storage-class", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_19) = &input.x_amz_tagging {
        let formatted_20 = inner_19.as_str();
                        if !formatted_20.is_empty() {
                            let header_value = formatted_20;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("x_amz_tagging", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-amz-tagging", header_value);
                        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn de_initiate_multipart_upload(inp: &[u8], mut builder: crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadOutputBuilder) -> Result<crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("InitiateMultipartUploadResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected InitiateMultipartUploadResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Bucket") /* Bucket com.nifcloud.api.storage.synthetic#InitiateMultipartUploadOutput$Bucket */ =>  {
                let var_21 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_21);
            }
            ,
            s if s.matches("Key") /* Key com.nifcloud.api.storage.synthetic#InitiateMultipartUploadOutput$Key */ =>  {
                let var_22 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_22);
            }
            ,
            s if s.matches("UploadId") /* UploadId com.nifcloud.api.storage.synthetic#InitiateMultipartUploadOutput$UploadId */ =>  {
                let var_23 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upload_id(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

