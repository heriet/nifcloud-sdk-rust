// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_multipart_uploads_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_multipart_uploads::ListMultipartUploadsOutput, crate::operation::list_multipart_uploads::ListMultipartUploadsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::list_multipart_uploads::ListMultipartUploadsError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::list_multipart_uploads::ListMultipartUploadsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_multipart_uploads_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_multipart_uploads::ListMultipartUploadsOutput, crate::operation::list_multipart_uploads::ListMultipartUploadsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder::default();
        output = crate::protocol_serde::shape_list_multipart_uploads::de_list_multipart_uploads(_response_body, output).map_err(crate::operation::list_multipart_uploads::ListMultipartUploadsError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_list_multipart_uploads_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::list_multipart_uploads::ListMultipartUploadsError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output.build()
    })
}

pub fn ser_list_multipart_uploads_headers(
                    input: &crate::operation::list_multipart_uploads::ListMultipartUploadsInput,
                    mut builder: ::http::request::Builder
                ) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.encoding_type {
        let formatted_2 = inner_1.as_str();
                        if !formatted_2.is_empty() {
                            let header_value = formatted_2;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("encoding_type", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("encoding-type", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_3) = &input.key_marker {
        let formatted_4 = inner_3.as_str();
                        if !formatted_4.is_empty() {
                            let header_value = formatted_4;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("key_marker", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("key-marker", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_5) = &input.max_uploads {
        let mut encoder = ::aws_smithy_types::primitive::Encoder::from(*inner_5);
        let formatted_6 = encoder.encode();
                        if !formatted_6.is_empty() {
                            let header_value = formatted_6;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("max_uploads", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("max-uploads", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_7) = &input.prefix {
        let formatted_8 = inner_7.as_str();
                        if !formatted_8.is_empty() {
                            let header_value = formatted_8;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("prefix", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("prefix", header_value);
                        }
    }
    if let ::std::option::Option::Some(inner_9) = &input.upload_id_marker {
        let formatted_10 = inner_9.as_str();
                        if !formatted_10.is_empty() {
                            let header_value = formatted_10;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("upload_id_marker", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("upload-id-marker", header_value);
                        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn de_list_multipart_uploads(inp: &[u8], mut builder: crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder) -> Result<crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("ListMultipartUploadsResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected ListMultipartUploadsResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("UploadIdMarker") /* UploadIdMarker com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$UploadIdMarker */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upload_id_marker(var_11);
            }
            ,
            s if s.matches("NextKeyMarker") /* NextKeyMarker com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$NextKeyMarker */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_key_marker(var_12);
            }
            ,
            s if s.matches("NextUploadIdMarker") /* NextUploadIdMarker com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$NextUploadIdMarker */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_upload_id_marker(var_13);
            }
            ,
            s if s.matches("Bucket") /* Bucket com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$Bucket */ =>  {
                let var_14 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_14);
            }
            ,
            s if s.matches("MaxUploads") /* MaxUploads com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$MaxUploads */ =>  {
                let var_15 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_uploads(var_15);
            }
            ,
            s if s.matches("Upload") /* Upload com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$Upload */ =>  {
                let var_16 =
                    Some(
                        Result::<::std::vec::Vec::<crate::types::Upload>, ::aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_17 = builder.upload.take().unwrap_or_default();
                            list_17.push(
                                crate::protocol_serde::shape_upload::de_upload(&mut tag)
                                ?
                            );
                            list_17
                        })
                        ?
                    )
                ;
                builder = builder.set_upload(var_16);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$IsTruncated */ =>  {
                let var_18 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `smithy.api#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_18);
            }
            ,
            s if s.matches("KeyMarker") /* KeyMarker com.nifcloud.api.storage.synthetic#ListMultipartUploadsOutput$KeyMarker */ =>  {
                let var_19 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_marker(var_19);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

