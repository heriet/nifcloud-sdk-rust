// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_complete_multipart_upload_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::complete_multipart_upload::CompleteMultipartUploadOutput, crate::operation::complete_multipart_upload::CompleteMultipartUploadError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled)?;
    let generic = generic_builder.build();
    Err(crate::operation::complete_multipart_upload::CompleteMultipartUploadError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_complete_multipart_upload_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::complete_multipart_upload::CompleteMultipartUploadOutput, crate::operation::complete_multipart_upload::CompleteMultipartUploadError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::complete_multipart_upload::builders::CompleteMultipartUploadOutputBuilder::default();
        output = crate::protocol_serde::shape_complete_multipart_upload::de_complete_multipart_upload(_response_body, output).map_err(crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled)?;
        output = output.set_content_type(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_content_type_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output = output.set_x_amz_expiration(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_x_amz_expiration_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse XAmzExpiration from header `x-amz-expiration"))?
        );
        output = output.set_x_amz_server_side_encryption(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_x_amz_server_side_encryption_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse XAmzServerSideEncryption from header `x-amz-server-side-encryption"))?
        );
        output = output.set_x_amz_server_side_encryption_aws_kms_key_id(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_x_amz_server_side_encryption_aws_kms_key_id_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse XAmzServerSideEncryptionAwsKmsKeyId from header `x-amz-server-side-encryption-aws-kms-key-id"))?
        );
        output = output.set_x_amz_server_side_encryption_customer_algorithm(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_x_amz_server_side_encryption_customer_algorithm_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse XAmzServerSideEncryptionCustomerAlgorithm from header `x-amz-server-side-encryption-customer-algorithm"))?
        );
        output = output.set_x_amz_version_id(
            crate::protocol_serde::shape_complete_multipart_upload_output::de_x_amz_version_id_header(_response_headers)
                                    .map_err(|_|crate::operation::complete_multipart_upload::CompleteMultipartUploadError::unhandled("Failed to parse XAmzVersionId from header `x-amz-version-id"))?
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_complete_multipart_upload(inp: &[u8], mut builder: crate::operation::complete_multipart_upload::builders::CompleteMultipartUploadOutputBuilder) -> Result<crate::operation::complete_multipart_upload::builders::CompleteMultipartUploadOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        #[allow(unused_variables)]
                        let start_el = decoder.start_el();
    if !start_el.matches("CompleteMultipartUploadResult") {
                            return Err(
                                ::aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected CompleteMultipartUploadResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            )
                        }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Bucket") /* Bucket com.nifcloud.api.storage.synthetic#CompleteMultipartUploadOutput$Bucket */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_1);
            }
            ,
            s if s.matches("ETag") /* ETag com.nifcloud.api.storage.synthetic#CompleteMultipartUploadOutput$ETag */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_e_tag(var_2);
            }
            ,
            s if s.matches("Key") /* Key com.nifcloud.api.storage.synthetic#CompleteMultipartUploadOutput$Key */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_3);
            }
            ,
            s if s.matches("Location") /* Location com.nifcloud.api.storage.synthetic#CompleteMultipartUploadOutput$Location */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_location(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

