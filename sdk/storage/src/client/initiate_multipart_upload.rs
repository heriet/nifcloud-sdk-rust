// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`InitiateMultipartUpload`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::bucket) / [`set_bucket(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_bucket):<br>required: **true**<br>(undocumented)<br>
    ///   - [`content_disposition(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::content_disposition) / [`set_content_disposition(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_content_disposition):<br>required: **false**<br>(undocumented)<br>
    ///   - [`content_encoding(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::content_encoding) / [`set_content_encoding(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_content_encoding):<br>required: **false**<br>(undocumented)<br>
    ///   - [`content_type(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::content_type) / [`set_content_type(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_content_type):<br>required: **false**<br>(undocumented)<br>
    ///   - [`object(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::object) / [`set_object(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_object):<br>required: **true**<br>(undocumented)<br>
    ///   - [`x_amz_meta(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_meta) / [`set_x_amz_meta(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_meta):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_server_side_encryption(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_server_side_encryption) / [`set_x_amz_server_side_encryption(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_server_side_encryption):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_server_side_encryption_customer_algorithm(XAmzServerSideEncryptionCustomerAlgorithmOfInitiateMultipartUploadRequest)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_server_side_encryption_customer_algorithm) / [`set_x_amz_server_side_encryption_customer_algorithm(Option<XAmzServerSideEncryptionCustomerAlgorithmOfInitiateMultipartUploadRequest>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_server_side_encryption_customer_algorithm):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_server_side_encryption_customer_key(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_server_side_encryption_customer_key) / [`set_x_amz_server_side_encryption_customer_key(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_server_side_encryption_customer_key):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_server_side_encryption_customer_key_md5(impl Into<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_server_side_encryption_customer_key_md5) / [`set_x_amz_server_side_encryption_customer_key_md5(Option<String>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_server_side_encryption_customer_key_md5):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_storage_class(XAmzStorageClassOfInitiateMultipartUploadRequest)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_storage_class) / [`set_x_amz_storage_class(Option<XAmzStorageClassOfInitiateMultipartUploadRequest>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_storage_class):<br>required: **false**<br>(undocumented)<br>
    ///   - [`x_amz_tagging(XAmzTaggingOfInitiateMultipartUploadRequest)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::x_amz_tagging) / [`set_x_amz_tagging(Option<XAmzTaggingOfInitiateMultipartUploadRequest>)`](crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::set_x_amz_tagging):<br>required: **false**<br>(undocumented)<br>
                            /// - On success, responds with [`InitiateMultipartUploadOutput`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput) with field(s):
    ///   - [`bucket(Option<String>)`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput::bucket): (undocumented)
    ///   - [`content_type(Option<String>)`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput::content_type): (undocumented)
    ///   - [`key(Option<String>)`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput::key): (undocumented)
    ///   - [`upload_id(Option<String>)`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadOutput::upload_id): (undocumented)
                            /// - On failure, responds with [`SdkError<InitiateMultipartUploadError>`](crate::operation::initiate_multipart_upload::InitiateMultipartUploadError)
    pub fn initiate_multipart_upload(&self) -> crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder {
                                crate::operation::initiate_multipart_upload::builders::InitiateMultipartUploadFluentBuilder::new(self.handle.clone())
                            }
}

